{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer2/source-files\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypeSlug from \"rehype-slug\";\n\nconst computedFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\n  },\n  slugAsParams: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n  },\n  headings: {\n    type: \"list\",\n    of: { type: \"string\" },\n    resolve: (doc) => {\n      const content = doc.body.raw;\n\n      const headingMatches = [];\n      const lines = content.split(\"\\n\");\n      let inCodeBlock = false;\n\n      // Simple slugify function\n      const slugify = (text) => {\n        return text\n          .toLowerCase()\n          .trim()\n          .replace(/[\\s+]/g, \"-\")\n          .replace(/[^\\w\\-]+/g, \"\");\n      };\n\n      lines.forEach((line) => {\n        if (line.trim().startsWith(\"```\")) {\n          inCodeBlock = !inCodeBlock;\n        }\n\n        if (!inCodeBlock) {\n          const match = line.match(/^(#{1,3})\\s(.+)$/);\n          if (match) {\n            const [_, hashes, text] = match;\n            const id = slugify(text);\n            headingMatches.push({\n              level: hashes.length,\n              text,\n              id,\n            });\n          }\n        }\n      });\n\n      return headingMatches;\n    },\n  },\n};\n\nconst Components = defineDocumentType(() => ({\n  name: \"Components\",\n  filePathPattern: \"./ui/**/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n      required: true,\n    },\n    image: {\n      type: \"string\",\n      required: true,\n    },\n    imageDark: {\n      type: \"string\",\n      required: false,\n    },\n    video: {\n      type: \"string\",\n      required: false,\n    },\n    videoDark: {\n      type: \"string\",\n      required: false,\n    },\n    price: {\n      type: \"number\",\n      required: false,\n    },\n    isFree: {\n      type: \"boolean\",\n      required: false,\n      default: false,\n    },\n    date: {\n      type: \"date\",\n      required: true,\n    },\n    active: {\n      type: \"boolean\",\n      required: false,\n      default: true,\n    },\n    pageStyle: {\n      type: \"string\",\n      required: false,\n    },\n  },\n  computedFields,\n}));\n\nconst Docs = defineDocumentType(() => ({\n  name: \"Docs\",\n  filePathPattern: \"./*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n      required: true,\n    },\n    date: {\n      type: \"date\",\n      required: true,\n    },\n  },\n  computedFields,\n}));\n\nexport default makeSource({\n  contentDirPath: \"./contents\",\n  documentTypes: [Components, Docs],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      [\n        rehypePrettyCode,\n        {\n          theme: { light: \"github-light-default\", dark: \"github-dark-dimmed\" },\n          keepBackground: false,\n        },\n      ],\n      [\n        rehypeAutolinkHeadings,\n        {\n          behavior: \"wrap\",\n          content: (node) => node.children,\n          properties: {\n            className: [\"subheading-anchor\"],\n            ariaLabel: \"Link to section\",\n          },\n        },\n      ],\n    ],\n  },\n});\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,eAAe;AACtB,OAAO,sBAAsB;AAC7B,OAAO,4BAA4B;AACnC,OAAO,gBAAgB;AAEvB,IAAM,iBAAiB;AAAA,EACrB,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK,aAAa;AAAA,EAC9C;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EACvE;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,IAAI,EAAE,MAAM,SAAS;AAAA,IACrB,SAAS,CAAC,QAAQ;AAChB,YAAM,UAAU,IAAI,KAAK;AAEzB,YAAM,iBAAiB,CAAC;AACxB,YAAM,QAAQ,QAAQ,MAAM,IAAI;AAChC,UAAI,cAAc;AAGlB,YAAM,UAAU,CAAC,SAAS;AACxB,eAAO,KACJ,YAAY,EACZ,KAAK,EACL,QAAQ,UAAU,GAAG,EACrB,QAAQ,aAAa,EAAE;AAAA,MAC5B;AAEA,YAAM,QAAQ,CAAC,SAAS;AACtB,YAAI,KAAK,KAAK,EAAE,WAAW,KAAK,GAAG;AACjC,wBAAc,CAAC;AAAA,QACjB;AAEA,YAAI,CAAC,aAAa;AAChB,gBAAM,QAAQ,KAAK,MAAM,kBAAkB;AAC3C,cAAI,OAAO;AACT,kBAAM,CAAC,GAAG,QAAQ,IAAI,IAAI;AAC1B,kBAAM,KAAK,QAAQ,IAAI;AACvB,2BAAe,KAAK;AAAA,cAClB,OAAO,OAAO;AAAA,cACd;AAAA,cACA;AAAA,YACF,CAAC;AAAA,UACH;AAAA,QACF;AAAA,MACF,CAAC;AAED,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAEA,IAAM,aAAa,mBAAmB,OAAO;AAAA,EAC3C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAamBAAmB,OAAO;AAAA,EACrC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,YAAY,IAAI;AAAA,EAChC,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACb;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,OAAO,EAAE,OAAO,wBAAwB,MAAM,qBAAqB;AAAA,UACnE,gBAAgB;AAAA,QAClB;AAAA,MACF;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,UAAU;AAAA,UACV,SAAS,CAAC,SAAS,KAAK;AAAA,UACxB,YAAY;AAAA,YACV,WAAW,CAAC,mBAAmB;AAAA,YAC/B,WAAW;AAAA,UACb;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
